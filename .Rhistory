# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge[1],
BP[2]*0.5*fledge[2],
BP[3]*0.5*fledge[3])
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] + capt.release # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
abund3
# use the last 2 digits of your student ID for set.seed
set.seed(3627)
time2 = 20 # retain a 20 year modeling framework
N03 <- c(41, 16, 43) # use the same starting population age structure
# we want to grab one value from our above distrubtions
# juvenile survival rates
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
Fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
## when you build a matrix to store your population projections, include 4 additional columns to store annual estimates of vital rates (s.juv, s.ad, and F) and annual population growth rate (lambda).
abund3 <- matrix(NA, nrow=(time2 + 1), ncol=(length(N03) + 5))
# assign our starting values as above
abund3[1,]<-c(N03, sum(N03), s.juv, s.ad, Fledge, 0)
for (t in 1:time2){
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge[1],
BP[2]*0.5*fledge[2],
BP[3]*0.5*fledge[3])
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
abund3
PIPL_proj2
# use the last 2 digits of your student ID for set.seed
set.seed(3627)
time2 = 20 # retain a 20 year modeling framework
N03 <- c(41, 16, 43) # use the same starting population age structure
# we want to grab one value from our above distrubtions
# juvenile survival rates
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
Fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
## when you build a matrix to store your population projections, include 4 additional columns to store annual estimates of vital rates (s.juv, s.ad, and F) and annual population growth rate (lambda).
abund3 <- matrix(NA, nrow=(time2 + 1), ncol=(length(N03) + 5))
# assign our starting values as above
abund3[1,]<-c(N03, sum(N03), s.juv, s.ad, Fledge, 0)
for (t in 1:time2){
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge,
BP[2]*0.5*fledge,
BP[3]*0.5*fledge)
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
abund3
# use the last 2 digits of your student ID for set.seed
set.seed(3627)
time2 = 20 # retain a 20 year modeling framework
N03 <- c(41, 16, 43) # use the same starting population age structure
# we want to grab one value from our above distrubtions
# juvenile survival rates
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
Fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
## when you build a matrix to store your population projections, include 4 additional columns to store annual estimates of vital rates (s.juv, s.ad, and F) and annual population growth rate (lambda).
abund3 <- matrix(NA, nrow=(time2 + 1), ncol=(length(N03) + 5))
# assign our starting values as above
abund3[1,]<-c(N03, sum(N03), s.juv, s.ad, Fledge, 0)
for (t in 1:time2){
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge,
BP[2]*0.5*fledge,
BP[3]*0.5*fledge)
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
(abund3)
# use the last 2 digits of your student ID for set.seed
set.seed(3627)
time2 = 20 # retain a 20 year modeling framework
N03 <- c(41, 16, 43) # use the same starting population age structure
# we want to grab one value from our above distrubtions
# juvenile survival rates
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
Fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
## when you build a matrix to store your population projections, include 4 additional columns to store annual estimates of vital rates (s.juv, s.ad, and F) and annual population growth rate (lambda).
abund3 <- matrix(NA, nrow=(time2 + 1), ncol=(length(N03) + 5))
# assign our starting values as above
abund3[1,]<-c(N03, sum(N03), s.juv, s.ad, Fledge, 0)
for (t in 1:time2){
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge,
BP[2]*0.5*fledge,
BP[3]*0.5*fledge)
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
(abund3)
# use the last 2 digits of your student ID for set.seed
set.seed(3627)
time2 = 20 # retain a 20 year modeling framework
N03 <- c(41, 16, 43) # use the same starting population age structure
# we want to grab one value from our above distrubtions
# juvenile survival rates
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
## when you build a matrix to store your population projections, include 4 additional columns to store annual estimates of vital rates (s.juv, s.ad, and F) and annual population growth rate (lambda).
abund3 <- matrix(NA, nrow=(time2 + 1), ncol=(length(N03) + 5))
# assign our starting values as above
abund3[1,]<-c(N03, sum(N03), s.juv, s.ad, fledge, 0)
for (t in 1:time2){
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge,
BP[2]*0.5*fledge,
BP[3]*0.5*fledge)
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
(abund3)
# use the last 2 digits of your student ID for set.seed
set.seed(3627)
time2 = 20 # retain a 20 year modeling framework
N03 <- c(41, 16, 43) # use the same starting population age structure
# we want to grab one value from our above distrubtions
# juvenile survival rates
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.68, (1.81-1.53)/4))
## when you build a matrix to store your population projections, include 4 additional columns to store annual estimates of vital rates (s.juv, s.ad, and F) and annual population growth rate (lambda).
abund3 <- matrix(NA, nrow=(time2 + 1), ncol=(length(N03) + 5))
# assign our starting values as above
abund3[1,]<-c(N03, sum(N03), s.juv, s.ad, fledge, 0)
for (t in 1:time2){
s.juv <- plogis(rnorm(1, -0.55, 0.25))
# adult survival rates
s.ad <- plogis(rnorm(1, 1.0, 0.18))
# annual fledging success
fledge <- (rnorm(1, 1.01, (1.81-1.53)/4))
# we need to build our projection matrix
# we can utilize the same fecundity as from
# survival data from Saunders et al. 2014
# Use data on F and S to construct a 3 x 3 projection matrix
# print the matrix
## generate single random values s.juv, s.ad, and F within this loop (hint: change 10000 in the above code chunk to 1 to generate a single value)
## annual fecundity (F) is a product of breeding propensity (BP) and fledging success (Fledge), assume breeding propensity varies by age but doesn't vary annually, and use values from Saunders et al. 2014
BP <- c(0.68, 0.85, 0.95)
# need our F vector
F = c(BP[1]*0.5*fledge,
BP[2]*0.5*fledge,
BP[3]*0.5*fledge)
# we can combine our success rates in to a vector for convenience
S = c(fledge, s.juv, s.ad)
## further assume that 50% of the offspring are female and calculate annual fecundity
## rebuild the projection matrix each iteration using these unique values of S and F
(PIPL_proj2 <- matrix(c(F[1]*S[1], F[2]*S[2], F[3]*S[3],
S[1],      0,         0,
0,         S[2],      S[3]),
nrow = age, ncol = age, byrow = TRUE))
## store randomly generated values for s.juv, s.ad, and F as part of your output in columns 5-7 of the matrix you create for data storage
## project the population forward 1 year and store population sub-components (juvs, yrlgs, adults) in columns 1-3, and sum the total population size and store in col 4
abund3[t+1,1:3] <- PIPL_proj2 %*% abund3[t,1:3] # add additional captive releases
abund3[t+1, 4] <- sum(abund3[t+1,1:3])
abund3[t+1, 5:7] <- c(fledge, s.juv, s.ad)
## estimate year over year population growth (lambda) as abund[i+1,4]/abund[i,4] and store this value in col 8
abund3[t+1, 8] <- (abund3[t+1, 4] / abund3[t,4])
}
(abund3)
plot(abund3[,8]~abund3[,7])
plot(abund3[,8]~abund3[,5])
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
plot(abund3[,8]~abund3[,6], xlab="juvenile success", ylab="lambda", main="lambda v juvenile success")
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
label(x)
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
plot(abund3[,8]~abund3[,6], xlab="juvenile success", ylab="lambda", main="lambda v juvenile success")
plot(abund3[,8]~abund3[,6], xlab="adult success", ylab="lambda", main="lambda v adult success")
plot(abund3[,8]~abund3[,5], xlab="fledgling success", ylab="lambda", main="lambda v fledgling success")
plot(abund3[,8]~abund3[,6], xlab="juvenile success", ylab="lambda", main="lambda v juvenile success")
plot(abund3[,8]~abund3[,7], xlab="adult success", ylab="lambda", main="lambda v adult success")
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
conda_remove("cv")
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
conda_list()
conda_remove("base")
conda_deactivate("base")
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
?as.geodata
??as.geodata
install_tensorflow(envname="image-recog")
virtualenv_list()
library(reticulate)
virtualenv_list()
use_condaenv("image-recog")
# base r get labels based on user defined classes
tf$constant("Hello Tensorflow!")
install_tensorflow(envname="image-recog")
install_keras(envname="image-recog")
label_list <- dir('images/train/')
output_n <- length(label_list)
save(label_list, file="label_list.R")
# rescale and normalize our image sizes
width <- 224
height <- 224
target_size <- c(width, height)
rgb <- 3
path_train <- "images/train/"
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
?image_data_generator
??image_data_generator
conda_install(envname="keras")
conda_install(envname="image-recog", "keras")
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
use_condaenv("image-recog")
library(keras)
library(tensorflow)
# base r get labels based on user defined classes
tf$constant("Hello Tensorflow!")
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
install_tensorflow(envname="image-recog")
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
conda_python()
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
py_config()
py_config()
conda_python
conda_version()
conda_exe()
python_version()
py_available()
py_version()
Sys.setenv(RETICULATE_PYTHON="/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310")
py_version()
use_python('/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310')
use_python('/Users/jackx/AppData/Local/Programs/Python/Python310')
use_python('Users/jackx/AppData/Local/Programs/Python/Python310')
use_python('Users/jackx/AppData/Local/Programs/Python/Python310/python.exe')
py_version()
reticulate::py_versions_windows()
py_config()
py_versions_windows()$install_path
py_versions_windows()$install_path[2]
virtualenv_remove('image-recog')
Y
virtualenv_create(envname = "image-recog",python=reticulate::py_versions_windows()$install_path[2])
virtualenv_create(envname = "image-recog",python=reticulate::py_versions_windows
?virtualenv_create
# configure python
# create our venv
py_path<-"/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310"
virtualenv_create(envname = "image-recog",python=py_path)
# configure python
# create our venv
py_path<-"/mnt/c/Users/jackx/AppData/Local/Programs/Python/Python310/python.exe"
virtualenv_create(envname = "image-recog",python=py_path)
# configure python
# create our venv
py_path<-"c/Users/jackx/AppData/Local/Programs/Python/Python310/python.exe"
virtualenv_create(envname = "image-recog",python=py_path)
# configure python
# create our venv
py_path<-"c/Users/jackx/AppData/Local/Programs/Python/Python310"
virtualenv_create(envname = "image-recog",python=py_path)
library(reticulate)
py_available()
py_config()
# configure python
# create our venv
install_python(version="3.10.*")
# configure python
# create our venv
install_python(version="3.10")
# configure python
# create our venv
library(reticulate)
install_python(version="3.10")
py_path<-install_python(version="3.10")
setwd("C:/Users/jackx/Desktop/image-recog")
py_path<-install_python(version="3.10")
setwd("/c")
py_path<-install_python(version="3.10")
Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog")
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
conda_python()
conda_version()
remove.packages("reticulate")
install.packages('reticulate')
install.packages("reticulate")
library(reticulate)
which python
py_available()
# configure python
# create our venv
library(reticulate)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog")
# first time set up for our venv
conda_install(envname="image-recog", "tensorflow")
reticulate::py_available()
reticulate::py_version()
py_config()
py_version(
)
py_exe()
use_python()
python_config()
library(reticulate)
python_config()
py_version()
virtualenv_remove('image-recog')
Y
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog", version=py_version())
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
virtualenv_create(envname = "image-recog", python=py_version())
py_available()
py_discover_config()
?virtualenv_python
label_list <- dir('images/train/')
output_n <- length(label_list)
save(label_list, file="label_list.R")
# rescale and normalize our image sizes
width <- 224
height <- 224
target_size <- c(width, height)
rgb <- 3
path_train <- "images/train/"
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
library(keras)
library(tensorflow)
install_keras()
